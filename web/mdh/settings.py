"""
Django settings for mdh project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from datetime import timedelta
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(__file__))

DEBUG = config("DEBUG", default=False, cast=bool)
TEMPLATE_DEBUG = DEBUG
SECRET_KEY = config("SECRET_KEY")

ALLOWED_HOSTS = config(
    "ALLOWED_HOSTS",
    cast=lambda v: [s.strip() for s in v.split(",")],
    default="localhost, 127.0.0.1, 3.99.236.110",
)
# CSRF_TRUSTED_ORIGINS = config(
#     "CSRF_TRUSTED_ORIGINS",
#     cast=lambda v: [s.strip() for s in v.split(",")],
#     default="localhost, 127.0.0.1, 3.99.236.110",
# )
SECURE_CROSS_ORIGIN_OPENER_POLICY = None


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    # thirdparty apps
    "whitenoise",
    "crispy_forms",
    "crispy_bootstrap5",
    "django_bootstrap5",
    "django_htmx",
    "widget_tweaks",
    "django_tables2",
    "django_celery_results",
    "debug_toolbar",
    # Local apps
    "mdh",
    "customer",
    "models",
    "tenant",
    "subscriptions",
    "dispatch",
    "fleet",
    "expense",
]

MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    # Custom
    "tenant.middleware.StorageQuotaMiddleware",
]

if DEBUG:
    INTERNAL_IPS = ["127.0.0.1", "localhost"]

    # Optional but recommended debug toolbar settings
    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK": lambda request: True,  # Always show toolbar during debug
    }
    DEBUG_TOOLBAR_CONFIG["IS_RUNNING_TESTS"] = False

ROOT_URLCONF = "mdh.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
            os.path.join(BASE_DIR, "expense", "templates"),
            os.path.join(BASE_DIR, "tenant", "templates"),
            os.path.join(BASE_DIR, "fleet", "templates"),
            os.path.join(BASE_DIR, "dispatch", "templates"),
            os.path.join(BASE_DIR, "customer", "templates"),
            os.path.join(BASE_DIR, "subscriptions", "templates"),
        ],
        "APP_DIRS": False,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "debug": True,
            "string_if_invalid": "TEMPLATE ERROR: %s",
            "loaders": [
                "django.template.loaders.filesystem.Loader",
                "django.template.loaders.app_directories.Loader",
            ],
            "builtins": [
                "django.templatetags.static",
                "django.templatetags.i18n",
                "django_bootstrap5.templatetags.django_bootstrap5",
                "django.template.defaultfilters",
            ],
        },
    },
]

# Print template directories for debugging
print("Template Directories:")
for template_dir in TEMPLATES[0]["DIRS"]:
    print(f"- {template_dir}")
print(f"Base Directory: {BASE_DIR}")

# Print template debug settings
print("Template Debug Settings:")
print(f"DEBUG: {DEBUG}")
print(f"TEMPLATE_DEBUG: {TEMPLATE_DEBUG}")
print(f"TEMPLATES[0]['OPTIONS']['debug']: {TEMPLATES[0]['OPTIONS']['debug']}")

# Print template loaders
print("Template Loaders:")
for loader in TEMPLATES[0]["OPTIONS"]["loaders"]:
    print(f"- {loader}")

# Print template directories for each loader
print("Template Directories for Each Loader:")
for loader in TEMPLATES[0]["OPTIONS"]["loaders"]:
    if loader == "django.template.loaders.filesystem.Loader":
        print("Filesystem Loader:")
        for template_dir in TEMPLATES[0]["DIRS"]:
            print(f"- {template_dir}")
    elif loader == "django.template.loaders.app_directories.Loader":
        print("App Directories Loader:")
        for app in INSTALLED_APPS:
            if not app.startswith("django."):
                app_dir = os.path.join(BASE_DIR, app.replace(".", "/"), "templates")
                if os.path.exists(app_dir):
                    print(f"- {app_dir}")

# Print template builtins
print("Template Builtins:")
for builtin in TEMPLATES[0]["OPTIONS"]["builtins"]:
    print(f"- {builtin}")

WSGI_APPLICATION = "mdh.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = (
    {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }
    if config("DB_MODE", default="sqlite") == "sqlite"
    else {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": config("DB_NAME"),
            "USER": config("DB_USER"),
            "PASSWORD": config("DB_PASSWORD"),
            "HOST": config("DB_HOST", default="db", cast=str),
            "PORT": config("DB_PORT", default=5432, cast=int),
        }
    }
)


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-ca"
TIME_ZONE = "America/Toronto"  # or your timezone
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "tmp", "staticfiles")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "tmp", "documents")
MEDIA_HOST = (
    "http://static.localhost"  # as per dc.yaml
    if DEBUG
    else "https://static.mydispatchhub.com"  # as per dc-prod-do.yaml
)

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# django setting.
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "my_cache_table",
    }
}

# Media and logs directories
USER_HOME = os.path.expanduser("~")
MEDIA_ROOT = os.path.join(USER_HOME, "mdh_media")
LOGS_DIR = os.path.join(USER_HOME, "mdh_logs")
FILE_TEMP_STORAGE = os.path.join(USER_HOME, "mdh_tmp")

# Create directories if they don't exist
for directory in [MEDIA_ROOT, LOGS_DIR, FILE_TEMP_STORAGE]:
    os.makedirs(directory, exist_ok=True)

# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "verbose",
            "filename": os.path.join(LOGS_DIR, "django.log"),
            "maxBytes": 10485760,  # 10MB
            "backupCount": 5,
        },
        "celery": {
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "verbose",
            "filename": os.path.join(LOGS_DIR, "celery.log"),
            "maxBytes": 10485760,  # 10MB
            "backupCount": 5,
        },
        "error_file": {
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "verbose",
            "filename": os.path.join(LOGS_DIR, "error.log"),
            "maxBytes": 10485760,  # 10MB
            "backupCount": 5,
            "level": "ERROR",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": True,
        },
        "django.request": {
            "handlers": ["error_file"],
            "level": "ERROR",
            "propagate": False,
        },
        "celery": {
            "handlers": ["celery", "console"],
            "level": "INFO",
            "propagate": True,
        },
        "dispatch.tasks": {
            "handlers": ["celery", "console"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

# Celery
CELERY_BROKER_URL = config("CELERY_BROKER_URL", default="redis://localhost:6379/0")
CELERY_RESULT_BACKEND = "django-db"
CELERY_TASK_SERIALIZER = "json"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_SIGNING = True
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_CACHE_BACKEND = "django-cache"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 600  # 10 minutes
CELERY_TASK_SOFT_TIME_LIMIT = 540  # 9 minutes

CELERY_BEAT_SCHEDULE = {
    "cleanup-incomplete-onboarding": {
        "task": "tenant.tasks.cleanup_incomplete_onboarding",
        "schedule": timedelta(minutes=60),
    },
}

# Custom
DOMAIN = "http://localhost" if DEBUG else "https://mydispatchhub.com"

LOGIN_URL = "tenant:login"
LOGIN_REDIRECT_URL = "tenant:home"
APPEND_SLASH = True

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
FILE_UPLOAD_PERMISSIONS = 0o644

AWS_BUCKET = config("AWS_BUCKET")
AWS_KEY = config("AWS_KEY")
AWS_SECRET = config("AWS_SECRET")
AWS_REGION = config("AWS_REGION", default="ca-central-1")
ENV = config("ENV", default="dev")
