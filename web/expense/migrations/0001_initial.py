# Generated by Django 5.1.2 on 2025-06-27 07:26

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('fleet', '0001_initial'),
        ('tenant', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BVD',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('date', models.DateTimeField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('currency', models.CharField(choices=[('CAD', 'Canadian Dollar'), ('USD', 'US Dollar')], default='CAD', max_length=3)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Accounted', 'Accounted'), ('Paid', 'Paid')], default='Pending', max_length=20)),
                ('company_name', models.CharField(max_length=255)),
                ('card_number', models.CharField(max_length=255)),
                ('time', models.CharField(max_length=255)),
                ('auth_code', models.CharField(max_length=255)),
                ('unit', models.IntegerField(help_text='Truck unit number from CSV')),
                ('odometer', models.IntegerField(default=0)),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('uom', models.CharField(default='L', help_text='Unit of measurement (L, GAL)', max_length=50)),
                ('retail_ppu', models.DecimalField(decimal_places=4, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('billed_ppu', models.DecimalField(decimal_places=4, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('pre_tax_amt', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('pst', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('gst', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('hst', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('qst', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('discount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('site_number', models.CharField(max_length=255)),
                ('site_name', models.CharField(max_length=255)),
                ('site_city', models.CharField(max_length=255)),
                ('prov_st', models.CharField(max_length=255)),
                ('transaction_id', models.CharField(blank=True, max_length=255, null=True)),
                ('import_batch', models.CharField(blank=True, max_length=255, null=True)),
                ('original_date', models.JSONField(blank=True, null=True)),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fleet.driver')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tenant.tenant')),
                ('truck', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fleet.truck')),
            ],
        ),
        migrations.CreateModel(
            name='OtherExpense',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('date', models.DateTimeField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('currency', models.CharField(choices=[('CAD', 'Canadian Dollar'), ('USD', 'US Dollar')], default='CAD', max_length=3)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Accounted', 'Accounted'), ('Paid', 'Paid')], default='Pending', max_length=20)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('category', models.CharField(choices=[('MAINTENANCE', 'Maintenance'), ('REPAIR', 'Repair'), ('TOLL', 'Toll'), ('PARKING', 'Parking'), ('INSURANCE', 'Insurance'), ('LICENSE', 'License'), ('PERMIT', 'Permit'), ('SUPPLIES', 'Supplies'), ('OTHER', 'Other')], default='OTHER', max_length=100)),
                ('receipt_image', models.ImageField(blank=True, null=True, upload_to='expense_receipts/%Y/%m/%d/')),
                ('receipt_number', models.CharField(blank=True, max_length=100)),
                ('vendor_name', models.CharField(blank=True, max_length=255)),
                ('vendor_location', models.CharField(blank=True, max_length=255)),
                ('notes', models.TextField(blank=True)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('tax_type', models.CharField(choices=[('GST', 'GST'), ('HST', 'HST'), ('PST', 'PST'), ('QST', 'QST'), ('NONE', 'None')], default='NONE', max_length=50)),
                ('is_reimbursable', models.BooleanField(default=True)),
                ('reimbursement_status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('PAID', 'Paid')], default='PENDING', max_length=20)),
                ('payment_method', models.CharField(choices=[('CASH', 'Cash'), ('CREDIT_CARD', 'Credit Card'), ('DEBIT_CARD', 'Debit Card'), ('CHEQUE', 'Cheque'), ('WIRE', 'Wire Transfer'), ('OTHER', 'Other')], default='CASH', max_length=50)),
                ('payment_reference', models.CharField(blank=True, max_length=255)),
                ('odometer', models.IntegerField(blank=True, null=True)),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fleet.driver')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tenant.tenant')),
                ('truck', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fleet.truck')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Payout',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('from_date', models.DateTimeField(help_text='Start date of payout period')),
                ('to_date', models.DateTimeField(help_text='End date of payout period')),
                ('cad_revenue', models.DecimalField(decimal_places=2, default=0, help_text='Revenue in CAD', max_digits=10)),
                ('cad_commission', models.DecimalField(decimal_places=2, default=0, help_text='Commission in CAD', max_digits=10)),
                ('cad_expenses', models.DecimalField(decimal_places=2, default=0, help_text='Total expenses in CAD (BVD + Other)', max_digits=10)),
                ('cad_payout', models.DecimalField(decimal_places=2, default=0, help_text='Net payout in CAD (revenue - commission - expenses)', max_digits=10)),
                ('usd_revenue', models.DecimalField(decimal_places=2, default=0, help_text='Revenue in USD', max_digits=10)),
                ('usd_commission', models.DecimalField(decimal_places=2, default=0, help_text='Commission in USD', max_digits=10)),
                ('usd_expenses', models.DecimalField(decimal_places=2, default=0, help_text='Total expenses in USD (BVD + Other)', max_digits=10)),
                ('usd_payout', models.DecimalField(decimal_places=2, default=0, help_text='Net payout in USD (revenue - commission - expenses)', max_digits=10)),
                ('final_cad_amount', models.DecimalField(decimal_places=2, default=0, help_text='Total amount in CAD after currency conversion', max_digits=10)),
                ('final_usd_amount', models.DecimalField(decimal_places=2, default=0, help_text='Total amount in USD after currency conversion', max_digits=10)),
                ('exchange_rate', models.DecimalField(decimal_places=4, default=1, help_text='Exchange rate CAD/USD used for conversion', max_digits=10)),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('Processing', 'Processing'), ('Completed', 'Completed'), ('Cancelled', 'Cancelled')], default='Draft', help_text='Payout processing status', max_length=20)),
                ('bvd_expenses', models.ManyToManyField(blank=True, help_text='BVD expenses included in this payout', to='expense.bvd')),
                ('driver', models.ForeignKey(help_text='Driver receiving the payout', on_delete=django.db.models.deletion.CASCADE, to='fleet.driver')),
                ('other_expenses', models.ManyToManyField(blank=True, help_text='Other expenses included in this payout', to='expense.otherexpense')),
                ('tenant', models.ForeignKey(help_text='Tenant owning this payout', on_delete=django.db.models.deletion.CASCADE, to='tenant.tenant')),
            ],
            options={
                'ordering': ['-from_date'],
            },
        ),
        migrations.AddIndex(
            model_name='bvd',
            index=models.Index(fields=['tenant', 'date', 'card_number'], name='expense_bvd_tenant__be3f9c_idx'),
        ),
        migrations.AddIndex(
            model_name='bvd',
            index=models.Index(fields=['tenant', 'date', 'unit'], name='expense_bvd_tenant__c57a80_idx'),
        ),
        migrations.AddIndex(
            model_name='bvd',
            index=models.Index(fields=['tenant', 'auth_code'], name='expense_bvd_tenant__e9920e_idx'),
        ),
        migrations.AddIndex(
            model_name='bvd',
            index=models.Index(fields=['unit', 'date'], name='expense_bvd_unit_bb4cf9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='bvd',
            unique_together={('tenant', 'date', 'card_number', 'auth_code', 'amount'), ('tenant', 'date', 'unit', 'site_number', 'quantity')},
        ),
        migrations.AddIndex(
            model_name='otherexpense',
            index=models.Index(fields=['-date'], name='expense_oth_date_9936b7_idx'),
        ),
        migrations.AddIndex(
            model_name='otherexpense',
            index=models.Index(fields=['category'], name='expense_oth_categor_ea67ec_idx'),
        ),
        migrations.AddIndex(
            model_name='otherexpense',
            index=models.Index(fields=['status'], name='expense_oth_status_0edf5a_idx'),
        ),
        migrations.AddIndex(
            model_name='otherexpense',
            index=models.Index(fields=['reimbursement_status'], name='expense_oth_reimbur_e1ec3c_idx'),
        ),
        migrations.AddIndex(
            model_name='payout',
            index=models.Index(fields=['tenant', 'driver', 'from_date'], name='expense_pay_tenant__c5373a_idx'),
        ),
        migrations.AddIndex(
            model_name='payout',
            index=models.Index(fields=['tenant', 'status'], name='expense_pay_tenant__e8a820_idx'),
        ),
        migrations.AddIndex(
            model_name='payout',
            index=models.Index(fields=['from_date', 'to_date'], name='expense_pay_from_da_48dae5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='payout',
            unique_together={('tenant', 'driver', 'from_date', 'to_date')},
        ),
    ]
